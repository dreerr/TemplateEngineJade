<?php
/**
 * TemplateEngineJade
 *
 * @author Diktus Dreibholz <dreerr@gmail.com>
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 * @version 1.0.2
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

require_once(dirname(dirname(__FILE__)) . '/TemplateEngineFactory/TemplateEngine.php');
$srcPath = dirname(__FILE__) . '/jade-php/src/';
spl_autoload_register(function($class) use($srcPath) {
    if (! strstr($class, 'Jade')) return;
    include($srcPath . str_replace("\\", DIRECTORY_SEPARATOR, $class) . '.php');
});

class TemplateEngineJade extends TemplateEngine implements Module, ConfigurableModule
{
    const COMPILE_DIR = 'TemplateEngineJade_compile/';

    /**
     * @var Jade_Environment
     */
    protected $jade;


    /**
     * Stores variables and values set with TemplateEngineJade::set(). Passed to Jade when rendering the template.
     *
     * @var array
     */
    protected $variables = array();


    /**
     * @param string $filename
     */
    public function __construct($filename = '')
    {
        parent::__construct($filename);
    }


    /**
     * Setup Jade
     */
    public function initEngine()
    {
        $cachePath = $this->wire('config')->paths->assets . 'cache/' . self::COMPILE_DIR;
        $this->jade = new Jade\Jade(array(
            'cache' => ($this->getConfig('use_cache') ? $cachePath : null),
            'extension' => '.' . $this->getConfig('template_files_suffix'),
            'prettyprint' => $this->getConfig('prettyprint'),
            'stream' => '.' . $this->getConfig('stream'),
            'phpSingleLine' => true,
            'keepBaseName' => true
        ));
        if ($this->getConfig('api_vars_available')) {
            foreach (Wire::getFuel() as $name => $object) {
                if ($name == $this->factory->get('api_var')) continue;
                $this->variables[$name] = $object;
            }
        }
        $this->initJade($this->jade);
    }


    /**
     * @return array
     */
    public static function getDefaultConfig()
    {
        $config = parent::getDefaultConfig();
        return array_merge($config, array(
            'template_files_suffix' => 'jade',
            'prettyprint' => 1,
            'stream' => 'jade.stream',
            'api_vars_available' => 1
        ));
    }


    /**
     * Set a key/value pair to the template
     *
     * @param $key
     * @param $value
     */
    public function set($key, $value)
    {
        $this->variables[$key] = $value;
    }


    /**
     * Render markup from template file
     *
     * @throws WireException
     * @return mixed
     */
    public function render()
    {
        try {
            $path = $this->getTemplatesPath() . $this->getFilename();
            return $this->jade->render($path, $this->variables);
        } catch (Exception $e) {
            throw new WireException($e->getMessage());
        }
    }


    /**
     * Clear all variables passed
     */
    public function clearVariables()
    {
        $this->variables = array();
    }


    /**
     * Clear cache when uninstalling
     */
    public function uninstall()
    {
        parent::uninstall();
        wireRmdir($this->wire('config')->paths->assets . 'cache/' . self::COMPILE_DIR, true);
    }


    /**
     * Hookable method called after jade instance is created.
     * Allows for customizing Jade, e.g. add filters
     *
     * @param Jade_Environment $jade
     */
    protected function ___initJade(Jade\Jade $jade) {}



    /**
     * Methods per interfaces Module, ConfigurableModule
     *
     */


    /**
     * @return array
     */
    public static function getModuleInfo()
    {
        return array(
            'title' => 'Template Engine Jade',
            'summary' => 'Jade templates for the TemplateEngineFactory',
            'version' => 102,
            'author' => 'Diktus Dreibholz (dreerr)',
            'href' => 'https://processwire.com/talk/topic/11386-module-jade-for-the-templateenginefactory/',
            'singular' => false,
            'autoload' => false,
            'requires' => array('TemplateEngineFactory'),
        );
    }


    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data)
    {
        /** @var Modules $modules */
        $data = array_merge(self::getDefaultConfig(), $data);
        $wrapper = parent::getModuleConfigInputfields($data);
        $modules = wire('modules');

        /** @var InputfieldCheckbox $f */
        $f = $modules->get('InputfieldCheckbox');
        $f->label = __('Import ProcessWire API variables in Jade templates');
        $f->description = __('All API variables (page, input, config etc.) are accessible in Jade, e.g. page for $page');
        $f->name = 'api_vars_available';
        if ($data['api_vars_available']) $f->checked = 1;
        $wrapper->append($f);

        /** @var InputfieldCheckbox $f */
        $f = $modules->get('InputfieldCheckbox');
        $f->label = __('Use Cache');
        $f->description = __('Templates are cached and will be recompiled only when the source code changes.');
        $f->name = 'use_cache';
        if ($data['use_cache']) $f->checked = 1;
        $wrapper->append($f);

        /** @var InputfieldCheckbox $f */
        $f = $modules->get('InputfieldCheckbox');
        $f->label = __('Output indented HTML');
        $f->description = __('Output rendered templates as indented HTML');
        $f->name = 'prettyprint';
        if ($data['prettyprint']) $f->checked = 1;
        $wrapper->append($f);

        /** @var InputfieldText $f */
        $f = $modules->get('InputfieldText');
        $f->label = __('Stream Wrapper Protocol');
        $f->description = __('Enter the name of the protocol under which `Jade\Stream\Template` class is [registered](http://php.net/manual/function.stream-wrapper-register.php)');
        $f->notes = __('You might want to change this if [Suhosin](https://suhosin.org/) is enabled and *suhosin.executor.include.whitelist* is set');
        $f->name = 'stream';
        $f->collapsed = 1;
        $f->value = $data['stream'];
        $f->required = 1;

        $wrapper->append($f);


        return $wrapper;
    }
}
